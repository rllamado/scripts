#!/usr/local/bin/bash

#####To Do

# [X] move windows with hardcoded numbers
# [X] parse info from $(system_profiler SPDisplaysDataType)
# [X] handle options for full, top, left, right, bottom, and combinations
# [ ] option to open x number of windows that fill screen accordingly

#####Variables

#numbers received from display settings
SCREEN_WIDTH=0
SCREEN_HEIGHT=0
MENU_BAR_HEIGHT=22

#variables to choose location
TOP=0
BOTTOM=0
LEFT=0
RIGHT=0
FULL=0

#####Functions

function usage()
{
    cat << EOF
usage: window [top] [bottom] [left] [right] [full] [help]
EOF
}

function options()
{
    cat <<EOF
Options:
  top)     Move window to the top. 
  bottom)  Move window to the bottom.
  left)    Move window to the left.
  right)   Move window to the right.
  full)    Make window full screen.
  help)    Print help.
EOF
}

function getResolution()
{
    STRING=$(system_profiler SPDisplaysDataType | grep Resolution | cut -d: -f2)
    SCREEN_WIDTH=$(echo $STRING | cut -dx -f1 | cut -d\  -f1)
    SCREEN_HEIGHT=$(echo $STRING | cut -dx -f2)
}

##### Arguments

if [[ "$#" -eq 0 ]]; then
    usage
    exit 0
fi

for i in "$@"
do
key="$1"

case $key in
    "bottom")
	BOTTOM=1
	shift
	;;
    "full")
	FULL=1
	shift
	;;
    "help")
        usage
	options
	exit 0
        ;;
    "left")
	LEFT=1
	shift
	;;
    "right")
	RIGHT=1
	shift
	;;
    "top")
	TOP=1
	shift
	;;
    *)
	echo "Argument [$key] not recognized."
	usage
        exit 0
	;;
esac
done

##### Move window
getResolution

#full screen
if [[ $FULL -eq 1 ]] || [[ ($TOP -eq 1) && ($BOTTOM -eq 1) ]] || [[ ($LEFT -eq 1) && ($RIGHT -eq 1) ]]; then
    printf '\e[3;0;0t'
    printf '\e[4;'$(($SCREEN_HEIGHT-$MENU_BAR_HEIGHT))';'$SCREEN_WIDTH't'
    exit 0
fi

#top left
if [[ ($TOP -eq 1) && ($LEFT -eq 1) ]]; then
    printf '\e[3;0;0t'
    printf '\e[4;'$(($SCREEN_HEIGHT/2 - $MENU_BAR_HEIGHT))';'$(($SCREEN_WIDTH/2))'t'
fi

#top right        
if [[ ($TOP -eq 1) && ($RIGHT -eq 1) ]]; then
    printf '\e[3;'$(($SCREEN_WIDTH/2))';0t'
    printf '\e[4;'$(($SCREEN_HEIGHT/2 - $MENU_BAR_HEIGHT))';'$(($SCREEN_WIDTH/2))'t'
fi

#bottom left
if [[ ($BOTTOM -eq 1) && ($LEFT -eq 1) ]]; then
    printf '\e[3;0;'$((($SCREEN_HEIGHT - $MENU_BAR_HEIGHT)/2))'t'
    printf '\e[4;'$(($SCREEN_HEIGHT/2 - $MENU_BAR_HEIGHT))';'$(($SCREEN_WIDTH/2))'t'
fi

#bottom right
if [[ ($BOTTOM -eq 1) && ($RIGHT -eq 1) ]]; then
    printf '\e[3;'$(($SCREEN_WIDTH/2))';'$((($SCREEN_HEIGHT - $MENU_BAR_HEIGHT)/2))'t'
    printf '\e[4;'$(($SCREEN_HEIGHT/2 - $MENU_BAR_HEIGHT))';'$(($SCREEN_WIDTH/2))'t'
fi

#left
if [[ ($LEFT -eq 1) && ($TOP -eq 0) && ($BOTTOM -eq 0) ]]; then
    printf '\e[3;0;0t'
    printf '\e[4;'$(($SCREEN_HEIGHT-$MENU_BAR_HEIGHT))';'$(($SCREEN_WIDTH/2))'t'
    exit 0
fi

#right
if [[ ($RIGHT -eq 1) && ($TOP -eq 0) && ($BOTTOM -eq 0) ]]; then
    printf '\e[3;'$(($SCREEN_WIDTH/2))';0t'
    printf '\e[4;'$(($SCREEN_HEIGHT-$MENU_BAR_HEIGHT))';'$(($SCREEN_WIDTH/2))'t'
    exit 0
fi