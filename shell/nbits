#!/bin/sh

#####Notes

# Does not handle negatives [two's complement] at this moment

#####Variables

#####Functions

function usage()
{
    cat << EOF
usage: nbits [number] [-h] [-r]
EOF
}

function options()
{
    cat << EOF
Options:
  number)	The number (in decimal) to count how many bits are required.
  help)		Print help.
  reference)    Prints reference of all powers of 2 up to 16 bits.
EOF
}

function get_nbits()
{
    if [[ $# -eq 2 ]]; then
	N=$[$2+1]
    else
	N=0
    fi
    
    # echo "Solving for $1"
    # echo "Checking 2^$N or $[2**$N]"

    if [[ $1 -ge $[2**$N] ]]; then
	get_nbits $1 $N
    elif [[ $1 -le $[1] ]]; then
	echo "# of bits: 1"
	echo "Did you really have to check that?"
    else
	echo "# of bits: $N"
    fi
}

function get_bin_hex()
{
    printf "D:%s  \tB:%0d  \tH:0x%x\n" "$1" $(bc <<< "ibase=10; obase=2;$1") "$1"
}

function reference()
{
    cat << EOF
Reference:
  2^0  = 1 
  2^1  = 2
  2^2  = 4 
  2^3  = 8
  2^4  = 16
  2^5  = 32 
  2^6  = 64
  2^7  = 128
  2^8  = 256
  2^9  = 512
  2^10 = 1024
  2^11 = 2048
  2^12 = 4096
  2^13 = 8192
  2^14 = 16384
  2^15 = 32768
  2^16 = 65536
EOF
}

##### Arguments

if [[ "$#" -eq 0 ]]; then
    usage
    exit 0
fi

case "$1" in
    -h)
	usage
	options
	exit
	;;
    -r)
	reference
	exit
	;;
    *)
	break
	;;
esac

get_nbits $1
get_bin_hex $1
exit
